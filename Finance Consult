import sqlite3
import matplotlib.pyplot as plt
from datetime import datetime

# Veritabanı bağlantısı
def create_connection():
    conn = sqlite3.connect('finance.db')
    return conn

# Veritabanı tablosunu oluştur
def create_table():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS transactions (
                        id INTEGER PRIMARY KEY,
                        amount REAL,
                        category TEXT,
                        description TEXT,
                        transaction_type TEXT,
                        date TEXT)''')
    conn.commit()
    conn.close()

# Gelir veya gider ekleme
def add_transaction(amount, category, description, transaction_type):
    conn = create_connection()
    cursor = conn.cursor()
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('''INSERT INTO transactions (amount, category, description, transaction_type, date)
                      VALUES (?, ?, ?, ?, ?)''', (amount, category, description, transaction_type, date))
    conn.commit()
    conn.close()

# Gelir ve giderleri listele
def list_transactions():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM transactions')
    rows = cursor.fetchall()
    conn.close()
    return rows

# Kategoriye göre harcama raporu
def report_by_category():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('''SELECT category, SUM(amount) FROM transactions
                      WHERE transaction_type = 'Expense' GROUP BY category''')
    rows = cursor.fetchall()
    conn.close()
    return rows

# Finansal durumu görselleştir
def plot_financial_summary():
    transactions = list_transactions()
    income = sum(t[1] for t in transactions if t[4] == 'Income')
    expense = sum(t[1] for t in transactions if t[4] == 'Expense')

    categories = ['Income', 'Expense']
    amounts = [income, expense]

    plt.pie(amounts, labels=categories, autopct='%1.1f%%', startangle=90)
    plt.title('Gelir ve Gider Dağılımı')
    plt.axis('equal')
    plt.show()

# Kategorilere göre harcamaları görselleştir
def plot_expenses_by_category():
    category_report = report_by_category()
    categories = [x[0] for x in category_report]
    amounts = [x[1] for x in category_report]

    plt.bar(categories, amounts)
    plt.xlabel('Kategori')
    plt.ylabel('Toplam Harcama')
    plt.title('Kategoriye Göre Harcamalar')
    plt.xticks(rotation=45, ha="right")
    plt.tight_layout()
    plt.show()

# Kullanıcı arayüzü
def main():
    create_table()

    while True:
        print("\nKişisel Finans Takip Uygulaması")
        print("1. Gelir Ekle")
        print("2. Gider Ekle")
        print("3. Tüm İşlemleri Listele")
        print("4. Kategoriye Göre Harcama Raporu")
        print("5. Finansal Durum Görselleştir")
        print("6. Kategorilere Göre Harcama Görselleştir")
        print("7. Çıkış")
        choice = input("Bir seçenek girin: ")

        if choice == '1':
            amount = float(input("Gelir Miktarını Girin: "))
            category = input("Kategori: ")
            description = input("Açıklama: ")
            add_transaction(amount, category, description, 'Income')
        elif choice == '2':
            amount = float(input("Gider Miktarını Girin: "))
            category = input("Kategori: ")
            description = input("Açıklama: ")
            add_transaction(amount, category, description, 'Expense')
        elif choice == '3':
            transactions = list_transactions()
            for transaction in transactions:
                print(transaction)
        elif choice == '4':
            report = report_by_category()
            for category, total in report:
                print(f"{category}: {total}")
        elif choice == '5':
            plot_financial_summary()
        elif choice == '6':
            plot_expenses_by_category()
        elif choice == '7':
            break
        else:
            print("Geçersiz seçenek!")

if __name__ == "__main__":
    main()
